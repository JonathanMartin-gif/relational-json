{"name":"relational-json","tagline":"","body":"# Relational JSON\r\n### Converts a JSON data-schema into a relational data store\r\nTakes a JSON data structure and converts it into a database-like module allowing easy CRUD operations on immutable & relational objects (*no data duplication*).\r\n\r\n## Installation\r\n```\r\nnpm install relational-json --save\r\n```\r\n\r\n## JSON data structure\r\nCreate your relational data-structure (*JSON format*) following the instructions below:\r\n\r\n### Tables\r\nYour JSON data structure can contain any amount of tables. Each table must respect the following points:\r\n- Table names must be unique.\r\n- Tables must have a **primary** property (*the name of the primary field of the table*)\r\n- Tables must have fields, which minimally contains the primary field of the table.\r\n```js\r\n{\r\n  \"TableName\": {\r\n    \"fields\": {}, // fields or columns of the data table\r\n    \"primary\": \"\", // primary field of the table\r\n    \"aggregates\": [], // relations to other tables\r\n    \"extends\": \"\", // parent table (inheritance) \r\n    \"extendedBy\": [] // child tables (inheritance)\r\n  }\r\n}\r\n```\r\n\r\n### Table fields\r\nEvery Table in your relational structure must have fields. Fields describe the nature of your data and the constraints that relational-json will enforce during POST and PUT operations.\r\nFields have the following properties:\r\n- **dataType**: the primitive type of your data. Supported types are:\r\n  - string\r\n  - date (*ISO format*)\r\n  - time (*ISO format, no timezone*)\r\n  - datetime (*ISO format, no timezone*)\r\n  - integer\r\n  - float\r\n  - boolean (*true, false, 0, 1*)\r\n- **allowNull**: whether the value can be set to *null* or not.\r\n- **defaultValue**: the default value used on a POST operation, if no value is provided.\r\n  \r\n#### Table fields, example\r\n```js\r\n{\r\n  \"TableName\": {\r\n    \"primary\": \"id\",\r\n    \"fields\": {\r\n      \"id\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"integer\"\r\n      },\r\n      \"title\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"string\"\r\n      },\r\n      \"is_active\": {\r\n        \"allowNull\": false,\r\n        \"defaultValue\": 1,\r\n        \"dataType\": \"boolean\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Table extends\r\nTables can extend a parent table, which means that each object from the child table will have a prototype object from the parent table. \r\nThe **extends** property is an object containing the following properties:\r\n- **table**: the parent table name\r\n- **local**: the local field (*child table*) used for the relation. (*equivalent to a foreign key (FK) field in SQL*)\r\n- **foreign**: the parent table field used for the relation. *usually the PK of the foreign table*\r\n\r\nWhen a table extends another, the child object cannot exist without the parent object. When you POST on a child table, relational-json will try two things:\r\n- If the parent table contains an entry with a PK value equal to value of the child's extension field, that parent becomes the child's prototype.\r\n- If no existing parent is found for a given PK, the parent is created using the provided data. (*This means that you must provide all required fields for all ancestors of a table on POST*)\r\n\r\n#### Table extends example\r\n```js\r\n{\r\n  \"TableA\": {\r\n    \"primary\": \"id\",\r\n    \"fields\": {\r\n      \"id\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"integer\"\r\n      },\r\n      \"name\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"string\"\r\n      }\r\n    }\r\n  },\r\n  \"TableB\": {\r\n    \"primary\": \"id\",\r\n    \"fields\": {\r\n      \"id\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"integer\"\r\n      },\r\n      \"job_title\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"string\"\r\n      }\r\n    },\r\n    \"extends\": {\r\n      \"table\": \"TableA\",\r\n      \"local\": \"id\", // refers to TableB.id\r\n      \"foreign\": \"id\" // refers to TableA.id\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Table extendedBy\r\nA table can be extended by child tables, this is essentially the same as *extends*, but from the parent table's point of view. This allows the parent table's objects to refer to their children.\r\nThe `extendedBy` property is an array of objects with the following properties:\r\n- **foreignTable**: the table that is a child of the current table.\r\n- **localField**: local field used for the relation.\r\n- **foreignField**: foreign field used for the relation.\r\n\r\n#### Table extendedBy example\r\nIf we take the previous example, we can add the `extendedBy` property to `TableA`:\r\n```js\r\n{\r\n  \"TableA\": {\r\n    \"primary\": \"id\",\r\n    \"fields\": {\r\n      \"id\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"integer\"\r\n      },\r\n      \"name\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"string\"\r\n      }\r\n    },\r\n    // added extendedBy information to relate to children\r\n    \"extendedBy\": [\r\n      {\r\n        \"foreignTable\": \"TableB\",\r\n        \"localField\": \"id\",\r\n        \"foreignField\": \"id\"\r\n      }\r\n    ]\r\n  },\r\n  \"TableB\": {\r\n    \"primary\": \"id\",\r\n    \"fields\": {\r\n      \"id\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"integer\"\r\n      },\r\n      \"job_title\": {\r\n        \"allowNull\": false,\r\n        \"dataType\": \"string\"\r\n      }\r\n    },\r\n    \"extends\": {\r\n      \"table\": \"TableA\",\r\n      \"local\": \"id\", // refers to TableB.id\r\n      \"foreign\": \"id\" // refers to TableA.id\r\n    }\r\n  }\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}